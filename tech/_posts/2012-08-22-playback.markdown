---
layout: tech_post
main: false
status: completed
category: tech
back: tech.html
title: playback.
quote: An advanced front-end architecture for Play! 2.0 with Backbone.js, Marionette, &amp; _CoffeeScript_.
source: playback
demo: http://franklovecchio-playback.herokuapp.com/?log=true
---

I've been doing a lot of front-end development these past couple years, in between [bouts](http://github.com/franklovecchio/app-mq) of the complete opposite. I guess you might call it developer _pivoting_, which seems to happen frequently with startups **\[otherwise known as fighting fires\]**. I enjoy being able to push my limits every time I have the chance to revisit the same problem I encountered in the past, but always armed with a better skill-set than before; this especially applies to UI. Since the release of [Bootstrap](http://twitter.com/bootstrap), I've taken notice to the seemingly endless amount of new techniques and libraries available for solving interface problems better. The reinvention, or building upon, was no-doubt absolutely necessary - not _just_ [Hacker News](http://news.ycombinator.org) propoganda. Building large, complex web applications **\[which need to support all browsers back to _Internet Explorer 7_\]** can be difficult, especially now that there's mobile and tablets to account for. I set out to learn these new tools, and in the process, had a little bit more fun building UI than I normally do.

<h2>[play 2.0 &amp; backbone.js]</h2>

Let's let history tell the story. _Two_ years ago, I would have written a PHP-based application in [CodeIgniter](http://codeigniter.com), and `heavily mixed Javascript and PHP`, using a library like [YUI](http://yuilibrary.com/) as the AJAX wrapper for building UI elements from data sets:

<div class="snippet">
   <pre>
YAHOO.util.Event.addListener(window, &quot;load&quot;, function () {
  YAHOO.example.XHR_JSON = function () {
    var myColumnDefs = [{
      key: &quot;status&quot;,
      label: &quot;Status&quot;,
      sortable: true,
      resizeable: true
    }, {
      key: &quot;name&quot;,
      label: &quot;Name&quot;,
      sortable: true,
      resizeable: true
    }];
    var myDataSource = new YAHOO.util.DataSource(&quot;doThis.php?someParam=&lt;? echo $someParam; ?&gt;&amp;someOtherParam=&lt;? echo $someOtherParam; ?&gt;&quot;);
    myDataSource.responseType = YAHOO.util.DataSource.TYPE_JSON;
    myDataSource.connXhrMode = &quot;queueRequests&quot;;
    myDataSource.responseSchema = {
      resultsList: &quot;ResultSet.Result&quot;,
      fields: [&quot;status&quot;, &quot;name&quot;]
    };
    singleSelectDataTable = new YAHOO.widget.DataTable(&quot;single&quot;,
    myColumnDefs, myDataSource, {
      selectionMode: &quot;single&quot;,
      width: &quot;100%&quot;
    });
    singleSelectDataTable.on('initEvent', function () {
      YAHOO.util.Dom.setStyle(singleSelectDataTable.getTableEl(), 'width', '100%');
    });
    // Subscribe to events for row selection
    singleSelectDataTable.subscribe(&quot;rowMouseoverEvent&quot;, singleSelectDataTable.onEventHighlightRow);
    singleSelectDataTable.subscribe(&quot;rowMouseoutEvent&quot;, singleSelectDataTable.onEventUnhighlightRow);
    singleSelectDataTable.subscribe(&quot;rowClickEvent&quot;, singleSelectDataTable.onEventSelectRow);
    singleSelectDataTable.subscribe(&quot;rowSelectEvent&quot;, function (trEl, record) {
      var status = trEl.record._oData.status;
      var name = trEl.record._oData.name;
      ... this shit continues
  }();
});	
  </pre>
</div>

_One_ year ago, I would have been writing a Java-based application in [Play! 1.2.4](http://www.playframework.org/documentation/1.2.4/home), and `echoing HTML inside Javascript`. I remember re-rendering the headers of `ul` blocks and having to create my own `repaint` methods **\[because of CSS issues\]** when building UI elements from data sets:

<div class="snippet">
   <pre>
function HTMLCreator() {
  this.createDivTableHeader = function () {
    var html = '&lt;li class=&quot;ticket-header&quot;&gt;';
    html += '&lt;ul&gt;';
    html += '&lt;li class=&quot;ticket-header-ticket&quot; style=&quot;width: 10%;&quot;&gt;Status&lt;/li&gt;';
    html += '&lt;li class=&quot;ticket-header-activity&quot; style=&quot;width: 20%;&quot;&gt;Duration&lt;/li&gt;';
    html += '&lt;li class=&quot;ticket-header-user&quot; style=&quot;width: 20%;&quot;&gt;Agent&lt;/li&gt;';
    html += '&lt;li class=&quot;ticket-header-priority&quot; style=&quot;width: 20%;&quot;&gt;Caller&lt;/li&gt;';
    html += '&lt;li class=&quot;ticket-header-age&quot; style=&quot;width: 20%;&quot;&gt;Company&lt;/li&gt;';
    html += '&lt;li class=&quot;ticket-header-age&quot; style=&quot;width: 5%;&quot;&gt;Flags&lt;/li&gt;';
    html += '&lt;li class=&quot;ticket-header-age&quot; style=&quot;width: 5%;&quot;&gt;Priority&lt;/li&gt;';
    html += '&lt;/ul&gt;';
    html += '&lt;/li&gt;';
    return html;
  };
  ... this shit continues
}
  </pre>
</div>

It makes me want to cry/pout when looking back. Building sustainable, reusable features like that took forever. I didn't know any better, and the learning curve of the shiny new frameworks like [Backbone.js](http://backbonejs.org) was rather steep; especially when you wanted to throw in learning _true_ _CoffeeScript_ at the same time **\[because it just seemed like the thing to do\]**.

When decision had to be made on architecture at at [2lemetry](http://2lemetry.com), we chose [Play! 2.0](http://playframework.org) and [Scala](http://scala-lang.org) as our web application back-end/language; it supports the massive amounts of Java libraries out there, _and_ works with [AKKA](http://akka.io). We adopted the framework before it was even released, and that only caused a few headaches :) 

It also had multiple features we were looking for in terms of front-end development, namely `compiled CoffeeScript, routes, and templates`. Something I think is especially important to note: `do not use Scala templates to render collections of data to the page`; it makes it much harder to manipulate.

<h2>[pre-reqs]</h2>
1. [Play! 2.0](http://playframework.org)
1. [Backbone.js](http://backbonejs.org)
1. [Marionette](https://github.com/derickbailey/backbone.marionette)

<h2>[standards]</h2>
1. All _CoffeeScript_, all the time.
1. `No Javascript inside HTMl files`.
1. [Format HTML](http://www.freeformatter.com/html-formatter.html).
1. Format _CoffeeScript_: _two_-space indents.
1. No `""`, only `''` in _Javascripts_, or no double-quotes. 

<h2>[functionality]</h2>
The application takes into account things I ran into on a regular basic across any application, but standardizes a workflow using the concept of _Pages_ **\[more on that later\]**. It starts with _two_ arbitrarily named _Pages_, named as _Actions_; we all know how quickly what needs to show up first on a dashboard can change in development cycles. The first page displays a _Collection_ in `table` form. _Models_ can be added to the _Collection_, or removed from it, and DOM elements are manipulated in the process. The second page displays a _Collection_ in `div` form, and updates when a WebSocket server running locally **\[a message is triggered by button-click\]**, pushes a new _Model_ to the page.

There are some generic helpers that do some nice modifications to _Collections_, as well as handle browser compatibility - geographic location is pulled when not using _Internet Explorer_.

On a _Backbone.js_ level, nothing is assumed as working out of the box - all _Collection_ and _Model_ `parse` methods are overridden, as this seemed to be encountered more frequently than anything. The _CompositeViews_ and _ItemViews_ provided by the _Marionette_ plugin all reflect listening to the _Backbone_ `on 'change'` events for this overriding.

Other features that came from real-world use-cases:

1. A _WebSocket Model_ which opens connection when then second page is viewed; the connection is than closed when the page changes.
1. A generic implementation of a _Model_ **\[how I would build breadcrumbs\]**, and one that pulls from a local API.

<h2>[marionette]</h2>
When initially exploring _Backbone_ and _CoffeeScript_ together, _Views_ confused me; there was way too much DOM referencing inside the Javascript - I'm still not OK with [double-references](http://stackoverflow.com/questions/12055038/global-references-b-t-templates-and-views), but at least there's some transparency in the way I approach it. _Marionette_ provides a very modular approach to building UI with it's _Regions_ and _Layouts_, and even though the learning-curve was doubly-steep, it makes the Javascript files more readable.

<h2>[run]</h2>
In order to run the application, you'll need to download _Play!_, have Java installed, and generally know how to do stuff. 

<div class="snippet">
   <pre class="terminal">
Franks-MacBook-Pro:Desktop franklovecchio$ git clone https://github.com/franklovecchio/playback.git
Cloning into playback...
remote: Counting objects: 151, done.
remote: Compressing objects: 100% (113/113), done.
remote: Total 151 (delta 38), reused 139 (delta 29)
Receiving objects: 100% (151/151), 146.67 KiB | 96 KiB/s, done.
Resolving deltas: 100% (38/38), done.
Franks-MacBook-Pro:Desktop franklovecchio$ cd playback
Franks-MacBook-Pro:playback franklovecchio$ sudo play run
  </pre>
</div>

<h2>[ide]</h2>
Import the project into your editor of choice; if it's _Eclipse_, like in my case, the _Scala_ plugin and _Play!_ do not always play well. Some things to be aware of:

1. When adding new template files, you have to specify `Ok` in the controller, `play run` the application, then `refresh` the _Eclipse_ project to be able to reference the newly added template. It's a bit silly. `You won't need to do this for the demo application, just if you're creating a new one`.

1. Lots of _CoffeeScript_ files slow down the app compile-time, but only when packaged _Javascripts_ are changed, and it's quite noticeable. I'm not sure why they haven't made this better. I've even tried an alternative compiler to no avail.

<h2>[templating]</h2>
Using _Play!_'s Scala templates, we have the ability to manage our assets in one place. These templates require a `.scala` prefix on any HTML file you wish to make a template. It makes it really easy to pass data from the server side to the templates, but I only use them for resources **\[I'm trying to be as framework-agnostic as possible\]**. Think of them as something similar to [Mustache](mustache.github.com) or [Underscore](http://underscore.org).

Our main application template is located at `/app/views/app.scala.html`. It is strictly a dependency management tool for passing resources to another template, `main.scala.html`, where we'll hold all our static resources. `By doing this we can define separate applications`, if we like, inside a single _Play!_ app, **\[think PROD, STAGING, and DEV\]**. There isn't a way to share client-side resources between _two_ separate _Play!_ apps like there is on the server-side **\[vis-a-vis [plugins](https://github.com/playframework/Play20/wiki/Modules)\]**, and creating separate apps without using separate `git branches` seemed to work well like this. The whole file is displayed below, and references every non third-party _Javascript_ we're using **\[typically everything we wrote\]**:

<div class="snippet">
   <pre>
@()
@main(
   css = List(),
   headJs = List(),
   bodyJs = List(),
   analytics = &quot;Google Analytics ID&quot;
) {
   @layout(
      // CSS
      List(
         // App
         &quot;app.css&quot;,
         // Action1
         &quot;action1.css&quot;,
         // Action2
         &quot;action2.css&quot;
      ),
      // _Javascripts_
      // Listed in order, each one being dependent (or not) on the other.
      List(        
         // Namespaces (window object)
         &quot;app/namespaces.js&quot;,
         
         // Utils and Logging
         &quot;utils/utils.js&quot;,
         &quot;utils/logger.js&quot;,
                
         // App
         &quot;app/events.js&quot;, 
         &quot;app/state.js&quot;, 
         &quot;app/ui.js&quot;, 
         &quot;app/errors.js&quot;, 
         &quot;app/routes.js&quot;, 
         
         // Helpers
         &quot;helpers/compatibility.js&quot;,
         &quot;helpers/collections.js&quot;,         
                  
         // Models
         &quot;models/item.js&quot;, // Generic, think breakcrumbs
         &quot;models/thing.js&quot;,
         &quot;models/socket.js&quot;,
         
         // Collections
         &quot;collections/items.js&quot;,
         &quot;collections/things.js&quot;,
        
         // Pages
            // App
            &quot;views/region.js&quot;,
            &quot;views/layout.js&quot;,
            &quot;views/nav.js&quot;,
            
            // Action1
            &quot;pages/action1/view.js&quot;, // Marionette Layout
            &quot;pages/action1/events.js&quot;, // View logic
            &quot;pages/action1/state.js&quot;, // View state, as long as the page is rendered
            &quot;pages/action1/ui.js&quot;, // DOM manipulation
            
            // Action2
            &quot;pages/action2/view.js&quot;,
            &quot;pages/action2/events.js&quot;,
            &quot;pages/action2/state.js&quot;,
            &quot;pages/action2/ui.js&quot;,
           
         &quot;app/app.js&quot; // Start the app here
      )
   )
}
   </pre>
</div>

It's pretty self-explanatory, and everything at bottom of the _List_ is dependent on the files described above it. _Pages_ are displayed in blocks, and are an agnostic concept that came from developing these applications. A _Page_ is simply an _Eclipse_ package and has _four_ class files associated with it **\[UI isn't always used\]**.

The `main.scala.html` template holds all references to the third-party libraries we are using to make the application browser compatible back to _Internet Explorer 7_; there's nothing like `building on the shoulders of giants`:

<div class="snippet">
   <pre>
@(
   css: List[String], 
   headJs: List[String], 
   bodyJs: List[String], 
   analytics: String
)(content: Html)
&lt;!-- 
css: css file path
headJs: javascript file paths DOM relevant
bodyJs: javascript file paths loaded at the end of the page
content: html body
--&gt;
&lt;!doctype html&gt;
&lt;head&gt;
   &lt;meta charset=&quot;utf-8&quot; /&gt;
   &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=8&quot; /&gt;
   &lt;title&gt;Playback&lt;/title&gt;
   
   &lt;!-- Bootstrap styles. Makes it easy to develop quickly. --&gt;
   &lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/stylesheets/third-party/bootstrap.min.css&quot;&gt;
   &lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/stylesheets/third-party/bootstrap-responsive.min.css&quot;&gt;
   &lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/stylesheets/third-party/prettify.css&quot;&gt;
   
   &lt;!-- Injected head CSS from Scala templates. --&gt;
   @for(cssFile &lt;- css) {
     &lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/stylesheets/@cssFile&quot;&gt;
   } 
   
   &lt;!-- Logging http://benalman.com/code/projects/javascript-debug/docs/files/ba-debug-js.html --&gt;
   &lt;!-- Takes care of IE issues with console, adds built in ability to turn on/off logs, adds various states. --&gt;
   &lt;script src=&quot;/assets/_Javascripts_/debug.min.js&quot;&gt;&lt;/script&gt;
   
   &lt;!-- jQuery --&gt;
   &lt;script src=&quot;/assets/_Javascripts_/jquery-1.7.1.min.js&quot;&gt;&lt;/script&gt;
   
   &lt;!-- Takes care of IE issues with jQuery. --&gt;
   &lt;script src=&quot;/assets/_Javascripts_/augment.js&quot;&gt;&lt;/script&gt;
   
   &lt;!-- Bootstrappy --&gt;
   &lt;script src=&quot;/assets/_Javascripts_/prettify.js&quot;&gt;&lt;/script&gt; 
   &lt;script src=&quot;/assets/_Javascripts_/less-1.3.0.min.js&quot;&gt;&lt;/script&gt;
   
   &lt;!-- Backbone/Underscore/Marionette --&gt;
   &lt;script src=&quot;/assets/_Javascripts_/json2.js&quot;&gt;&lt;/script&gt;
   &lt;script src=&quot;/assets/_Javascripts_/underscore.min.js&quot;&gt;&lt;/script&gt;
   &lt;script src=&quot;/assets/_Javascripts_/backbone.min.js&quot;&gt;&lt;/script&gt;
   &lt;script src=&quot;/assets/_Javascripts_/backbone.marionette-0.8.1.min.js&quot;&gt;&lt;/script&gt;
   
   &lt;!-- Injected head _Javascripts_ from Scala templates --&gt;
   @for(jsFile &lt;- headJs) {
      &lt;script src=&quot;/assets/_Javascripts_/@jsFile&quot;&gt;&lt;/script&gt;
   } 
   
&lt;/head&gt;
&lt;body data-spy=&quot;scroll&quot; data-target=&quot;.subnav&quot; data-offset=&quot;50&quot; onload=&quot;prettyPrint();&quot;&gt;
   @content
   &lt;!-- Bootstrap! --&gt;
   &lt;script src=&quot;/assets/_Javascripts_/bootstrap.min.js&quot;&gt;&lt;/script&gt;
   
   &lt;!-- Injected body _Javascripts_ go at the end of the page for faster loading. --&gt;
   @for(jsFile &lt;- bodyJs) {
      &lt;script src=&quot;/assets/_Javascripts_/@jsFile&quot;&gt;&lt;/script&gt;
   } 
   &lt;!-- Google Analytics --&gt;
   &lt;!-- Allow multiple applications to be displayed with a dynamic ID --&gt;
   &lt;div id=&quot;google-analytics&quot; class=&quot;hide&quot;&gt;@analytics&lt;/div&gt;
   &lt;script type=&quot;text/javascript&quot;&gt;
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', $('div#google-analytics').html()]);
      _gaq.push(['_trackPageview']);
      (function () {
         var ga = document.createElement('script');       
         ga.type = 'text/javascript';
         ga.async = true;
         ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
         var s = document.getElementsByTagName('script')[0];
         s.parentNode.insertBefore(ga, s);
      })();
   &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
   </pre>
</div>

<h2>[namespaces]</h2>
I may have overdone it a bit, but after reading through various blogs and [StackOverflow](http://stackoverflow.com) rants, I decided that the ability to know what's in a global namespace at any given time could be useful, even if they're a bit long in this case **\[App.Pages.Views.Action1 could easily be App.P.V.A1\]**. All class files are scoped separately than their instantiated counterparts - I'm not sure if this is good practice or not, but it works. Nothing is ever set in `window` except for `App`, `Portal`, and `Helpers`:

<div class="snippet">
   <pre>
# Holds the Marionette application.
window.Portal = { } 

# Holds the entire application. 
window.App = { } 

# Holds class references to all Helpers.
window.Helpers = { }

# Holds class references for app/pages to all Views, Events, UI, Errors, and states.
App.Config = { }
App.Views = { }
App.Events = { }
App.UI = { }
App.State = { }
App.Errors = { }

# Holds instantiated app references to global Config, Events, UI, Errors, and states.
App.Global = { }

# Holds instantiated page references to all Views, Events, UI, Errors, and states.
App.Pages = { }
App.Pages.Views = { }
App.Pages.Events = { }
App.Pages.UI = { }
App.Pages.State = { }

# Holds instantiated references to all Helpers.
App.Helpers = { }

# Holds class references to all Backbone Models (that are not considered Helpers).
App.Models = { }
# Holds class references to all Backbone Collections.
App.Collections = { }

# Holds class references to all Marionette Regions.
App.Regions = { } 
# Holds class references to all Marionette Layouts.
App.Layouts = { }
# Holds class references to all Marionette ItemViews.
App.ItemViews = { } 
# Holds class references to all Marionette CompositeViews.
App.CompositeViews = { } 

# Holds instantiated View references.
App.Rendered = { }

# Holds all global data at an application level.
App.Data = { } 
# Holds all global data at a page level.
App.Data.Pages = { }
   </pre>
</div>

<h2>[logging]</h2>
By appending a _GET_ parameter of `?log=true`, we have the ability to turn on logging to the application, and it's _Internet Explorer_ safe! `By default, logging is turned off`.

For application logging, I got tired of writing `debug.info 'MyClass.myMethod()` [really quickly](http://stackoverflow.com/questions/11973181/log-every-method). The solution is to prepend every method but `constructor` with `@trace` to make `debug.info` happen automatically when the method is called. **Note:** one minor issue is that `App.SomeSpace.MyClass` logs as `MyClass`.

<h2>[routes]</h2>
In `/app/assets/javascripts/app/app.coffee`, where the application is started from a _Backbone_ perspective, I made it so that creating a page does **not** require modification of the `Routes` class; instead, you'd simply follow the convention for creating a _Page_, and you can set the default route programatically: 

**Note**: using some Googled trickery, routes are not case sensitive!

<div class="snippet">
   <pre>
ROUTES =
  'action1/:page': 'standardRouter'
  'action2/:page': 'standardRouter'
  '*path': 'defaultRouter'
...

# Start Backbone history.
App.Router = new Routes(
  routes: ROUTES
)
App.Router.setDefaultRoute 'action1/1'
Backbone.history.start()
   </pre>
</div>

The reason for following `:view/:page` is simple; it's what I could break down every URL to. If I wanted to keep state via the URL in a more complicated fashion, I'd simply override `standardRouter` and delimit the data passed through.

<h2>Conventions</h2>
I think the best way to follow the _Page_ process is to show modifications necessary for adding one. Before we do that, let's look at some conventions used:

1. In _Scala_ template files, always reference DOM elements that are bound to _Backbone Views_ with a `do-` prefix.
1. In _Scala_ template files, always reference DOM elements that are bound to our _UI_ classes, so we don't go on a renaming spree and break shit.
1. _Pages_ are **always** _Marionette Layouts_; it makes it easy to add new features by just adding more _Regions_
1. _Pages_ are **always** numbered; it makes it easier to swap references, placement, and makes routing simpler. Most of the time, this works really well.
1. _Pages_ are generic references to _Actions_, as when developing an application, the page functionality - and it's name - might change on completion.
1. States for _Pages_ are cleared when the view changes. If you need to keep something in state globally, you can use the _App.State_ class.
1. Templates reference data via `obj.someId` to avoid breaking when an attribute is undefined, even if it _does_ render as `undefined`.
1. All _Pages_ have their own CSS files, and classes inside them are prefixed based on their name; this makes it easier to track down issues at-a-glance.

<h2>[application core]</h2>
The entire _Backbone_ application instantiation can be summed up by _42_ lines of _CoffeeScript_:

<div class="snippet">
   <pre>
ROUTES =
  'action1/:page': 'standardRouter'
  'action2/:page': 'standardRouter'
  '*path': 'defaultRouter'
  
# App.
App.Global.Events = new Events()
App.Global.UI = new UI()
App.Global.State = new State()
App.Global.Errors = new Errors()

# Helpers.
App.Helpers.Compatibility = new Helpers.Compatibility()
App.Helpers.Collections = new Helpers.Collections()

# Geolocation.
if !App.Helpers.Compatibility.isIE()
  App.Global.Events.geoLocate()
  
# Start Marionette.
App.Portal = new Backbone.Marionette.Application()
App.Portal.start { } # Don't pass it anything

# Setup default Marionette Layouts/Regions.
App.Global.State.setDefaultRegion new App.Regions.Default()
App.Global.State.setDefaultLayout new App.Layouts.Default()

# Render the application HTML wireframe.
App.Global.State.getDefaultRegion().show App.Global.State.getDefaultLayout()
App.Global.State.getNavRegion().show new App.Views.Nav()

# Start Backbone history.
App.Router = new Routes(
  routes: ROUTES
)
App.Router.setDefaultRoute 'action1/1'
Backbone.history.start()
  </pre>
</div>

The process, on each page reload:

1. Declare routes.
1. Instantiate application classes **\[these are equivalent to _Pages_ \]**.
1. Geo-locate.
1. Setup/render the default application template with _Marionette_.
1. Start the _Backbone Router_.

<h2>[adding a page]</h2>
To create a third page in this app, we'll call it `Action3`, we'd start off by adding an _Eclipse_ package called `/app/assets/javascripts/pages/action3`. _Pages_ require _four_ new Javascript files:

1. `/app/assets/javascripts/pages/action3/events.coffee`

1. `/app/assets/javascripts/pages/action3/state.coffee`

1. `/app/assets/javascripts/pages/action3/ui.coffee`

1. `/app/assets/javascripts/pages/action3/view.coffee`

In order to simplify pages, I'm using the `eval()` function to instantiate _Page_ classes from a single defined route object inside `/app/assets/javscripts/app/app.coffee` **\[view the source of the Routes class, it's pretty cool\]**. We need a reference to our new route, now:

<div class="snippet">
   <pre>
ROUTES =
  'action1/:page': 'standardRouter' 
  'action2/:page': 'standardRouter'
  'action3/:page': 'standardRouter' # Hey, I'm new.
  '*path': 'defaultRouter'
   </pre>
</div>

Next, we need to add the template references. First, we'll create the new _Scala_ template as `/app/views/action3.scala.html` using standard _Bootstrap_ CSS. You'll note that each _Page_ can reference it's own container-type:

<div class="snippet">
   <pre>
@()
&lt;script type=&quot;text/template&quot; id=&quot;template-action3&quot;&gt;
&lt;div class=&quot;container-fluid offset-from-top&quot;&gt;
   &lt;div class=&quot;row-fluid&quot;&gt;
      &lt;div class=&quot;span1&quot;&gt;
         Action3
      &lt;/div&gt;
      &lt;div class=&quot;span11&quot;&gt;
         &lt;div id=&quot;region-content&quot;&gt;
            &lt;!-- page content --&gt;
         &lt;/div&gt;
      &lt;/div&gt;
   &lt;/div&gt;
&lt;/div&gt;
&lt;/script&gt;
   </pre>
</div>

In order for the application to know about this _Scala_ template, we need to reference it where all _Pages_ are defined, in `/app/views/layout.scala.html`:

<div class="snippet">
   <pre>
@(css: List[String], js: List[String])

&lt;!-- Global Templates --&gt;
@nav() 

&lt;!-- Page Templates --&gt;
@action1()
@action2()
@action3() &lt;!-- Hey, I'm new. --&gt;

&lt;!-- Wireframe --&gt;
&lt;div id=&quot;default-region&quot;&gt;
  &lt;script type=&quot;text/template&quot; id=&quot;template-layout&quot;&gt;
     &lt;div id=&quot;region-nav&quot;&gt;
        &lt;!-- navbar --&gt;
     &lt;/div&gt;
     &lt;div id=&quot;region-content&quot;&gt;
        &lt;!-- content --&gt;
     &lt;/div&gt;
  &lt;/script&gt;
&lt;/div&gt;

&lt;!-- Injected --&gt;
@for(cssFile &lt;- css) {
   &lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/stylesheets/@cssFile&quot;&gt;
} 

@for(jsFile &lt;- js) {
   &lt;script src=&quot;/assets/_Javascripts_/@jsFile&quot;&gt;&lt;/script&gt;
}
   </pre>
</div>

<h2>Views</h2>
All pages are defined as _Marionette Layouts_, as it makes it easy to add new `Marionette Regions`, which typically hold `Collections`, `Models`, or even nested `Layouts`. A simple example creates a single, swappable content region:

<div class="snippet">
   <pre>
class App.Views.Action3 extends Backbone.Marionette.Layout

  template: '#template-action3'
  regions:
    content: '#region-content'

  @trace close: () -&amp;amp;gt;
    
    @remove()
    @unbind()
    </pre>
</div>   

If you wanted to add a button-click to this _View_, you would first modify the _Scala_ template, noting that we add a `do-` prefix to the DOM ID, so as to note the _View_ encapsulates it. It's easy to miss what's bound and what's not once your application gets bigger, and this seems to help:

<div class="snippet">
   <pre>
@()
&lt;script type=&quot;text/template&quot; id=&quot;template-action2&quot;&gt;
&lt;!-- Bound:
   button#do-something Always add a comment, always prefix View events with 'do-' prefix.
--&gt;
&lt;div class=&quot;container-fluid offset-from-top&quot;&gt;
   &lt;div class=&quot;row-fluid&quot;&gt;
      &lt;div class=&quot;span1&quot;&gt;
         Action2
         &lt;button id=&quot;do-add_item&quot; class=&quot;btn btn-medium&quot;&gt;Simulate WebSocket Add Item&lt;/button&gt;
      &lt;/div&gt;
      &lt;div class=&quot;span11&quot;&gt;
         &lt;div id=&quot;region-content&quot;&gt;
            &lt;!-- page content --&gt;
         &lt;/div&gt;
      &lt;/div&gt;
   &lt;/div&gt;
&lt;/div&gt;
&lt;/script&gt;
    </pre>
</div> 

That _View_ event needs to be referenced in the _Javascript_ next, so the first file to be modified is `/app/assets/javscripts/pages/action3/view.coffee`:

<div class="snippet">
   <pre>
class App.Views.Action3 extends Backbone.Marionette.Layout

  template: '#template-action3'
  regions:
    content: '#region-content'

  events:
    'click button#do-something': 'doSomething'

  @trace doSomething: (event) ->

    App.Pages.Events.Action3.doSomething()

  @trace close: () -&amp;gt;
    
    @remove()
    @unbind()
    </pre>
</div> 

The `doSomething` method references a method of the same name in the _Events_ class related to the page; `it's a good idea to keep all logic inside the Events classes of Pages`.

<h2>Events</h2>
Since _Page_ logic is contained in the _Events_ classes, they can grow to be quite large. Here's a brief overview of what I see happening most of the time on _Page_ render:

1. Check if something is defined.
1. If not defined, go somewhere else.
1. If defined, request some data, render it to the _Page_.

In the code, this boils down to:

1. Check if something is defined in `continueToLoad`, return `false` if it's not, and reference `App.Router.navigate 'action/1', true` as the redirect tool. `Always uses the Backbone Router to navigate`. 
1. Swap the global content _Region_ out with our _Layout_ in `doBeforeLayouts`.
1. `renderPage1` renders the _Layout_, and could swap in requested data.

<div class="snippet">
   <pre>
class App.Events.Action3 extends Backbone.Model
  
  @trace initialize: () -&gt;
      
  # Any checks that need to be done to show page.
  @trace continueToLoad: () -&gt;
  
    return true 
  
  # Render the page.
  @trace doBeforeLayouts: () -&gt;

    App.Pages.State.Action3.setLayout new App.Views.Action1()
    App.Global.State.getContentRegion().show App.Pages.State.Action3.getLayout()

  @trace renderPage1: () -&gt;
  
    # Add data if you wish.
    
  @trace router: (page) -&gt;

    if !@continueToLoad()
      return
        
    @doBeforeLayouts()
    
    switch page
      when 1
        
        @renderPage1()
        
  # Non-render methods
  
  @trace doSomething: (event) -&gt;    

    App.Pages.UI.Action3.showSomeAlert()
    </pre>
</div> 

<h2>UI</h2>
Anytime I've used _jQuery_ to manipulate elements on a large scale, `it got messy really fast`. The best way I could think to keep this in check was to move all references of _jQuery_ manipulation to a separate helper. Because it's so prevalent, it just made sense to package this `UI` class with all _Pages_. In the constructor, single references are made to the elements being manipulated - `this works really well for managing complicated shit`:

<div class="snippet">
   <pre>
class App.UI.Action3
  
  constructor: () -&gt;
    
    @someAlert ='div#some_alert'

  @trace showSomealert: () -&gt;
    
    $(@someAlert).slideDown()
    </pre>
</div>
   
<h2>State</h2>
Managing global variables has always been a pain in the ass in _Javascript_, which is probably why I went so namespace crazy above. `Every Page` has a _State_ class which holds, at the very least, its _Layout_ reference. Every time the _Backbone Router_ is called and the _Page_ is rendered, the globals are cleared. In it's most basic form:

<div class="snippet">
   <pre>
class App.State.Action3 extends Backbone.Model
  
  @trace initialize: () -&gt;
    
    # Set
    App.Data.Pages.Action3 = { }
  
  @trace setLayout: (layout) -&gt;

    App.Data.Pages.Action3.layout = layout
  
  @trace getLayout: () -&gt;
  
    App.Data.Pages.Action3.layout  
    </pre>
</div>

That's all she wrote for now. I didn't go through the _Helper_ classes much, as the code for those is well-documented in the source...and mostly self-explanatory. I'll work on making this a more exhaustive tutorial. I hope this gives you an idea of how to structure your front-end applications in a more well-formed way!